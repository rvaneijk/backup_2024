# ... (previous imports and functions remain the same)

def archive_task(logger):
    """
    Perform the archive task (monthly backup).

    Args:
        logger: Logger object for logging messages.
    """
    start_time = timer()
    logger.info("Starting monthly backup process...")
    
    # Check if the backup destination is mounted
    if not check_mount():
        logger.error("Backup destination is not mounted. Attempting to mount...")
        try:
            # Assuming there's a mount_backup_destination function in core.file_system
            from core.file_system import mount_backup_destination
            if not mount_backup_destination():
                logger.error("Failed to mount backup destination. Exiting.")
                sys.exit(1)
            logger.info("Backup destination mounted successfully.")
        except ImportError:
            logger.error("mount_backup_destination function not found. Please mount the destination manually.")
            sys.exit(1)
    
    # Check for backup password
    if BACKUP_PASSWORD_ENV not in os.environ:
        logger.error(f"Error: {BACKUP_PASSWORD_ENV} environment variable is not set")
        logger.info(f"To run this script, set the {BACKUP_PASSWORD_ENV} environment variable:")
        logger.info(f"export {BACKUP_PASSWORD_ENV}='your_secure_password'")
        sys.exit(1)
    
    logger.info("DISK space on the device before backup:")
    subprocess.run(["df", "-h", "--total", str(AWS_DIR)])
    
    # ... (rest of the function remains the same)

# ... (rest of the script remains the same)